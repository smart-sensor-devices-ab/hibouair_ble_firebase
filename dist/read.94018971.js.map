{"mappings":"AAAA,IAEIA,EA2CJC,SAASC,eAAe,cAAcC,iBAAiB,SAAS,WAC9D,IAAIC,EAAQH,SAASC,eAAe,YAAYG,MAC5CC,EAAML,SAASC,eAAe,OAAOG,MAErCD,EACFG,MAAMH,EAAQ,IAAME,EAAM,SACvBE,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IAEL,MAAMC,EAzBd,SAAmBD,GACjB,MAAME,EAAW,GAGXC,EAAS,CAAC,QAASC,OAAOC,KAAKL,EAASI,OAAOC,KAAKL,GAAU,MACpEE,EAASI,KAAKH,EAAOI,KAAK,MAG1B,IAAK,MAAMC,KAAOR,EAAU,CAC1B,MAAMS,EAAM,CAACT,EAASQ,GAAKE,MAAON,OAAOO,OAAOX,EAASQ,KACzDN,EAASI,KAAKG,EAAIF,KAAK,KACzB,CAEA,OAAOL,EAASK,KAAK,KACvB,CAWwBK,CAAUZ,GAGpBa,EAAO,IAAIC,KAAK,CAACb,GAAU,CAAEc,KAAM,aAGnCC,EAAO1B,SAAS2B,cAAc,KACpCD,EAAKE,KAAOC,IAAIC,gBAAgBP,GAChCG,EAAKK,SAAW,oBAGhB/B,SAASgC,KAAKC,YAAYP,GAC1BA,EAAKQ,QACLlC,SAASgC,KAAKG,YAAYT,EAAA,IAE3BU,OAAOC,GAAUC,QAAQD,MAAM,uBAAwBA,KAE1DrC,SAASC,eAAe,OAAOsC,UAAY,sBAE/C,IACAvC,SACGC,eAAe,cACfC,iBAAiB,UAAU,SAAUsC,GACpCA,EAAMC,iBACN,IAAIC,EAAMC,SAAS3C,SAASC,eAAe,eAAeG,OACtDD,EAAQH,SAASC,eAAe,YAAYG,MAC5CC,EAAML,SAASC,eAAe,OAAOG,MACzCE,MAAMH,EAAQ,IAAME,EAAM,SACvBE,MAAMC,GAAaA,EAASC,SAC5BF,MAAMqC,IACL,IAAIC,EAAO,GACGA,EAAH,GAAPH,EAjFZ,SAAoBG,EAAMH,GACxB,MAAMI,EAAe,CAAC,EACtB,IAAIC,EAEJA,EAAe,IAAIC,MACjB,IAAIA,MAAOC,UAAY,OAACP,EAAM,IAGhC,IAAK,MAAMxB,KAAO2B,EAAM,CACtB,MAAMK,EAAQL,EAAK3B,GACbiC,EAAY,IAAIH,KAAKE,EAAM9B,IAI/B+B,EAAUC,gBAAkBL,EAAaK,eACzCD,EAAUE,aAAeN,EAAaM,YACtCF,EAAUG,YAAcP,EAAaO,YAErCR,EAAa5B,GAAOgC,EAExB,CAEA,OAAOJ,CACT,CA0D6BS,CAAWX,EAASF,GAC7BE,EA6BZ,MAAMY,EApBN,SAAyBC,EAAYC,GACnC,MAAMC,EAAS,GACf,IAAIC,EAAe,CAACH,EAAW,IAE/B,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAWK,OAAQD,IAAK,CAC7B,IAAIb,KAAKS,EAAWI,IAAM,IAAIb,KAAKS,EAAWI,EAAI,IAEpDH,EACTE,EAAa5C,KAAKyC,EAAWI,KAE7BF,EAAO3C,KAAK4C,GACZA,EAAe,CAACH,EAAWI,IAE/B,CAGA,OADAF,EAAO3C,KAAK4C,GACLD,CACT,CApB0BI,CAHJjD,OAAOO,OAAOwB,GAAMmB,KAAKC,GAASA,EAAK7C,KAGJ,KAuBjB4C,KAAKE,GAAUA,EAAM,KAGvDC,EAAgB,IACjB,IAAIC,IAAItD,OAAOO,OAAOwB,GAAMmB,KAAKC,GAASA,EAAKI,YAI9CC,EAAyB,CAACC,EAAYC,IAC1CD,EAAWP,KAAKC,GAASA,EAAKO,KAG1BC,EAAWN,EAAcO,SAASC,IACtC,MAAMJ,EAAazD,OAAOO,OAAOwB,GAAM+B,QACpCX,GAASA,EAAKI,UAAYM,IAIvBE,EAAaN,EAAW,GAAG9C,KAEjC,IAAIqD,EAAa,KACbC,EAAa,KACbC,EAAc,KACdC,EAAc,KA+BlB,OA7BmB,IAAfJ,EACFC,EAAa,CACXI,MAAO,GAAGP,UACV9B,KAAMyB,EAAuBC,EAAY,OACzCY,YAAa,UACbC,MAAM,GAEgB,IAAfP,IACTE,EAAa,CACXG,MAAO,GAAGP,UACV9B,KAAMyB,EAAuBC,EAAY,OACzCY,YAAa,UACbC,MAAM,GAERJ,EAAc,CACZE,MAAO,GAAGP,YACV9B,KAAMyB,EAAuBC,EAAY,QACzCY,YAAa,UACbC,MAAM,GAERH,EAAc,CACZC,MAAO,GAAGP,WACV9B,KAAMyB,EAAuBC,EAAY,QACzCY,YAAa,UACbC,MAAM,IAKH,CACL,CACEF,MAAO,GAAGP,kBACV9B,KAAMyB,EAAuBC,EAAY,QACzCY,YAAa,UACbC,MAAM,GAER,CACEF,MAAO,GAAGP,eACV9B,KAAMyB,EAAuBC,EAAY,OACzCY,YAAa,UACbC,MAAM,GAER,CACEF,MAAO,GAAGP,eACV9B,KAAMyB,EAAuBC,EAAY,YACzCY,YAAa,UACbC,MAAM,GAER,CACEF,MAAO,GAAGP,UACV9B,KAAMyB,EAAuBC,EAAY,OACzCY,YAAa,UACbC,MAAM,GAERN,EACAC,EACAC,EACAC,GACAL,OAAOS,QAAA,IAILC,EAAMtF,SAASC,eAAe,WAAWsF,WAAW,MAC3CC,MAAXzF,GACFA,EAAQ0F,UAEV1F,EAAU,IAAI2F,MAAMJ,EAAK,CACvB7D,KAAM,OACNoB,KAAM,CACJ8C,OAAQnC,EACRiB,SAAUA,GAEZmB,QAAS,CAET,GACF,GAIN","sources":["read.js"],"sourcesContent":["var theVal = [];\r\n\r\nvar myChart;\r\n\r\nfunction filterData(data, inp) {\r\n  const filteredData = {};\r\n  let selectedDate;\r\n\r\n  selectedDate = new Date(\r\n    new Date().getTime() - (inp - 1) * 24 * 60 * 60 * 1000\r\n  );\r\n  // Iterate through each object in the original data\r\n  for (const key in data) {\r\n    const entry = data[key];\r\n    const entryDate = new Date(entry.ts);\r\n\r\n    // Compare the entry date with the selected date\r\n    if (\r\n      entryDate.getFullYear() === selectedDate.getFullYear() &&\r\n      entryDate.getMonth() === selectedDate.getMonth() &&\r\n      entryDate.getDate() === selectedDate.getDate()\r\n    ) {\r\n      filteredData[key] = entry;\r\n    }\r\n  }\r\n\r\n  return filteredData;\r\n}\r\n\r\nfunction jsonToCsv(jsonData) {\r\n  const csvArray = [];\r\n\r\n  // Add header row\r\n  const header = ['ts', ...Object.keys(jsonData[Object.keys(jsonData)[0]])];\r\n  csvArray.push(header.join(','));\r\n\r\n  // Add data rows\r\n  for (const key in jsonData) {\r\n    const row = [jsonData[key].ts, ...Object.values(jsonData[key])];\r\n    csvArray.push(row.join(','));\r\n  }\r\n\r\n  return csvArray.join('\\n');\r\n}\r\n//document.getElementById('getData').addEventListener('click', function () {\r\ndocument.getElementById('exportData').addEventListener('click', function () {\r\n  let dburl = document.getElementById('database').value;\r\n  let ref = document.getElementById('ref').value;\r\n\r\n  if (dburl) {\r\n    fetch(dburl + '/' + ref + '.json')\r\n      .then((response) => response.json())\r\n      .then((jsonData) => {\r\n        // Convert JSON data to CSV format\r\n        const csvData = jsonToCsv(jsonData);\r\n\r\n        // Create a Blob with the CSV data\r\n        const blob = new Blob([csvData], { type: 'text/csv' });\r\n\r\n        // Create a download link\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = 'hibouair_data.csv';\r\n\r\n        // Append the link to the document and trigger the download\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      })\r\n      .catch((error) => console.error('Error fetching data:', error));\r\n  } else {\r\n    document.getElementById('log').innerHTML = 'Database URL missing';\r\n  }\r\n});\r\ndocument\r\n  .getElementById('formSubmit')\r\n  .addEventListener('submit', function (event) {\r\n    event.preventDefault();\r\n    let inp = parseInt(document.getElementById('date-choose').value);\r\n    let dburl = document.getElementById('database').value;\r\n    let ref = document.getElementById('ref').value;\r\n    fetch(dburl + '/' + ref + '.json')\r\n      .then((response) => response.json())\r\n      .then((rawdata) => {\r\n        let data = [];\r\n        if (inp != 0) data = filterData(rawdata, inp);\r\n        else data = rawdata;\r\n\r\n        // Extract timestamps\r\n        const rawTimestamps = Object.values(data).map((item) => item.ts);\r\n\r\n        // Group timestamps into intervals less than 5 seconds\r\n        const groupedTimestamps = groupTimestamps(rawTimestamps, 5000); // 5000 milliseconds (5 seconds)\r\n\r\n        // Function to group timestamps\r\n        function groupTimestamps(timestamps, interval) {\r\n          const result = [];\r\n          let currentGroup = [timestamps[0]];\r\n\r\n          for (let i = 1; i < timestamps.length; i++) {\r\n            const diff = new Date(timestamps[i]) - new Date(timestamps[i - 1]);\r\n\r\n            if (diff < interval) {\r\n              currentGroup.push(timestamps[i]);\r\n            } else {\r\n              result.push(currentGroup);\r\n              currentGroup = [timestamps[i]];\r\n            }\r\n          }\r\n\r\n          result.push(currentGroup);\r\n          return result;\r\n        }\r\n\r\n        // Function to extract the first timestamp from each group\r\n        const groupedLabels = groupedTimestamps.map((group) => group[0]);\r\n\r\n        // Extract unique devices\r\n        const uniqueDevices = [\r\n          ...new Set(Object.values(data).map((item) => item.boardID)),\r\n        ];\r\n\r\n        // Function to extract values for a parameter for a specific device\r\n        const extractValuesForDevice = (deviceData, parameter) =>\r\n          deviceData.map((item) => item[parameter]);\r\n\r\n        // Create datasets for each unique device (temperature, VOC, and either CO2 or PM values)\r\n        const datasets = uniqueDevices.flatMap((deviceID) => {\r\n          const deviceData = Object.values(data).filter(\r\n            (item) => item.boardID === deviceID\r\n          );\r\n\r\n          // Determine the type of the device (assuming all data points have the same type for a given device)\r\n          const deviceType = deviceData[0].type;\r\n\r\n          let co2Dataset = null;\r\n          let pm1Dataset = null;\r\n          let pm25Dataset = null;\r\n          let pm10Dataset = null;\r\n\r\n          if (deviceType === 4) {\r\n            co2Dataset = {\r\n              label: `${deviceID} - CO2`,\r\n              data: extractValuesForDevice(deviceData, 'co2'),\r\n              borderColor: '#4285F4',\r\n              fill: false,\r\n            };\r\n          } else if (deviceType === 3) {\r\n            pm1Dataset = {\r\n              label: `${deviceID} - PM1`,\r\n              data: extractValuesForDevice(deviceData, 'pm1'),\r\n              borderColor: '#DB4437',\r\n              fill: false,\r\n            };\r\n            pm25Dataset = {\r\n              label: `${deviceID} - PM2.5`,\r\n              data: extractValuesForDevice(deviceData, 'pm25'),\r\n              borderColor: '#F4B400',\r\n              fill: false,\r\n            };\r\n            pm10Dataset = {\r\n              label: `${deviceID} - PM10`,\r\n              data: extractValuesForDevice(deviceData, 'pm10'),\r\n              borderColor: '#0F9D58',\r\n              fill: false,\r\n            };\r\n            // Add datasets for PM25 and PM10 if needed\r\n          }\r\n\r\n          return [\r\n            {\r\n              label: `${deviceID} - Temperature`,\r\n              data: extractValuesForDevice(deviceData, 'temp'),\r\n              borderColor: '#273c75',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: `${deviceID} - Humidity`,\r\n              data: extractValuesForDevice(deviceData, 'hum'),\r\n              borderColor: '#8c7ae6',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: `${deviceID} - Pressure`,\r\n              data: extractValuesForDevice(deviceData, 'pressure'),\r\n              borderColor: '#6D214F',\r\n              fill: false,\r\n            },\r\n            {\r\n              label: `${deviceID} - VOC`,\r\n              data: extractValuesForDevice(deviceData, 'voc'),\r\n              borderColor: '#F97F51',\r\n              fill: false,\r\n            },\r\n            co2Dataset,\r\n            pm1Dataset,\r\n            pm25Dataset,\r\n            pm10Dataset,\r\n          ].filter(Boolean); // Remove null values from the array\r\n        });\r\n\r\n        // Create Chart.js chart\r\n        const ctx = document.getElementById('myChart').getContext('2d');\r\n        if (myChart != undefined) {\r\n          myChart.destroy();\r\n        }\r\n        myChart = new Chart(ctx, {\r\n          type: 'line',\r\n          data: {\r\n            labels: groupedLabels,\r\n            datasets: datasets,\r\n          },\r\n          options: {\r\n            // Configure chart options\r\n          },\r\n        });\r\n\r\n        // Function to generate random color\r\n      });\r\n  });\r\n"],"names":["$f222382c1dcbbdbf$var$myChart","document","getElementById","addEventListener","dburl","value","ref","fetch","then","response","json","jsonData","csvData","csvArray","header","Object","keys","push","join","key","row","ts","values","$f222382c1dcbbdbf$var$jsonToCsv","blob","Blob","type","link","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","catch","error","console","innerHTML","event","preventDefault","inp","parseInt","rawdata","data","filteredData","selectedDate","Date","getTime","entry","entryDate","getFullYear","getMonth","getDate","$f222382c1dcbbdbf$var$filterData","groupedLabels","timestamps","interval","result","currentGroup","i","length","groupTimestamps","map","item","group","uniqueDevices","Set","boardID","extractValuesForDevice","deviceData","parameter","datasets","flatMap","deviceID","filter","deviceType","co2Dataset","pm1Dataset","pm25Dataset","pm10Dataset","label","borderColor","fill","Boolean","ctx","getContext","undefined","destroy","Chart","labels","options"],"version":3,"file":"read.94018971.js.map"}